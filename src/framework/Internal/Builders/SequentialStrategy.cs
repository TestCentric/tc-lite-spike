// ***********************************************************************
// Copyright (c) Charlie Poole and TestCentric contributors.
// Licensed under the MIT License. See LICENSE.txt in root directory.
// ***********************************************************************

using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using TCLite.Framework.Api;
using TCLite.Framework.Extensibility;
using TCLite.Framework.Internal;

namespace TCLite.Framework.Builders
{
    /// <summary>
    /// SequentialStrategy creates test cases by using all of the
    /// parameter data sources in parallel, substituting <c>null</c>
    /// when any of them run out of data.
    /// </summary>
    public class SequentialStrategy : CombiningStrategy
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SequentialStrategy"/> class.
        /// </summary>
        /// <param name="sources">The sources.</param>
        public SequentialStrategy(IEnumerable[] sources) : base(sources) { }

        /// <summary>
        /// Gets the test cases generated by the CombiningStrategy.
        /// </summary>
        /// <returns>The test cases.</returns>
        public override IEnumerable<ITestCaseData> GetTestCases()
        {
            List<ITestCaseData> testCases = new List<ITestCaseData>();

            for (; ; )
            {
                bool gotData = false;
                object[] testdata = new object[Sources.Length];

                for (int i = 0; i < Sources.Length; i++)
                    if (Enumerators[i].MoveNext())
                    {
                        testdata[i] = Enumerators[i].Current;
                        gotData = true;
                    }
                    else
                        testdata[i] = null;

                if (!gotData)
                    break;

                ParameterSet parms = new ParameterSet();
                parms.Arguments = testdata;
                testCases.Add(parms);
            }

            return testCases;
        }
    }
}
